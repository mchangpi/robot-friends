{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","robot","id","name","email","className","src","alt","CardList","cardList","robots","map","idx","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","console","log","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","toLocaleLowerCase","includes","connect","reducerSearchRobots","reducerRequestRobots","dispatch","event","text","target","value","payload","fetch","then","resp","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRequest","reducerRoot","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","createLogger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c4208b24.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = (props) => {\n  const { id, name, email } = props.robot;\n  return (\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt={`img${id}`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  if (0) {\n    throw new Error(\"NOOOOOO!\");\n  }\n  const cardList = robots.map((robot, idx) => {\n    return <Card key={idx} robot={robot} />;\n  });\n  return <div>{cardList}</div>;\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        type=\"search\"\n        placeholder=\"Search name here\"\n        onChange={searchChange}\n        className=\"pa3 ba b--green bg-lightest-blue\"\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  console.log(props);\n  //return <h1>hi</h1>;\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"600px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops, Error occurs</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport { actionSetSearchField, actionRequestRobots } from \"../actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.reducerSearchRobots.searchField,\n    robots: state.reducerRequestRobots.robots,\n    isPending: state.reducerRequestRobots.isPending,\n    error: state.reducerRequestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) =>\n      dispatch(actionSetSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(actionRequestRobots()),\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filterRobots = robots.filter((robot) => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(searchField.toLocaleLowerCase());\n    });\n\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RobotFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filterRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants.js\";\n\n/* this def refers to definition of mapDispatchToProps */\nexport const actionSetSearchField = (text) => {\n  console.log(\"search text: \", text);\n  return { type: CHANGE_SEARCH_FIELD, payload: text };\n};\n\n/* define a higher order function for redux-thunk */\nexport const actionRequestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((resp) => resp.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((error) =>\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\n    );\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const reducerSearchRobots = (\n  state = initialStateSearch,\n  action = {}\n) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst initialStateRequest = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const reducerRequestRobots = (\n  state = initialStateRequest,\n  action = {}\n) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case REQUEST_ROBOTS_SUCCESS:\n      return { ...state, robots: action.payload, isPending: false };\n    case REQUEST_ROBOTS_FAILED:\n      return { ...state, error: action.payload, isPending: false };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleWare from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { reducerSearchRobots, reducerRequestRobots } from \"./reducers\";\n\nconst reducerRoot = combineReducers({\n  reducerSearchRobots,\n  reducerRequestRobots,\n});\n\nconst store = createStore(\n  reducerRoot,\n  applyMiddleware(thunkMiddleWare, createLogger())\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}